#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Check_MK Poseidon monitor Sensors Plugin
#
# This program is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# snmpwalk -v1 -c public 192.168.1.47 .1.3.6.1.4.1.21796.3.3.3.1
#iso.3.6.1.4.1.21796.3.3.3.1.2.1 = STRING: "RaumHum_Rack C"
#iso.3.6.1.4.1.21796.3.3.3.1.2.2 = STRING: "Rack C1"
#iso.3.6.1.4.1.21796.3.3.3.1.2.3 = STRING: "RaumTemp_Rack C"
#iso.3.6.1.4.1.21796.3.3.3.1.4.1 = INTEGER: 3
#iso.3.6.1.4.1.21796.3.3.3.1.4.2 = INTEGER: 1
#iso.3.6.1.4.1.21796.3.3.3.1.4.3 = INTEGER: 1
#iso.3.6.1.4.1.21796.3.3.3.1.5.1 = STRING: "24.4 %RH"
#iso.3.6.1.4.1.21796.3.3.3.1.5.2 = STRING: "26.0 C"
#iso.3.6.1.4.1.21796.3.3.3.1.5.3 = STRING: "24.6 C"
#iso.3.6.1.4.1.21796.3.3.3.1.6.1 = INTEGER: 244
#iso.3.6.1.4.1.21796.3.3.3.1.6.2 = INTEGER: 260
#iso.3.6.1.4.1.21796.3.3.3.1.6.3 = INTEGER: 246
#iso.3.6.1.4.1.21796.3.3.3.1.7.1 = INTEGER: 244
#iso.3.6.1.4.1.21796.3.3.3.1.7.2 = INTEGER: 260
#iso.3.6.1.4.1.21796.3.3.3.1.7.3 = INTEGER: 246
#iso.3.6.1.4.1.21796.3.3.3.1.8.1 = INTEGER: 19209
#iso.3.6.1.4.1.21796.3.3.3.1.8.2 = INTEGER: 34465
#iso.3.6.1.4.1.21796.3.3.3.1.8.3 = INTEGER: 40828
#iso.3.6.1.4.1.21796.3.3.3.1.9.1 = INTEGER: 3
#iso.3.6.1.4.1.21796.3.3.3.1.9.2 = INTEGER: 0
#iso.3.6.1.4.1.21796.3.3.3.1.9.3 = INTEGER: 0
#iso.3.6.1.4.1.21796.3.3.3.1.10.1 = STRING: "%RH"
#iso.3.6.1.4.1.21796.3.3.3.1.10.2 = STRING: "C"
#iso.3.6.1.4.1.21796.3.3.3.1.10.3 = STRING: "C"


def poseidon_sensors_scan(oid):
    return oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.21796.3.3")

poseidon_sensors_info = ( ".1.3.6.1.4.1.21796.3.3.3.1", [
                             2,  # sensorName
                             6,  # sensorValue
                             9,  # sensorType
                             10, # sensorMeasurementUnit
                      ])

#
# TEMP
#
poseidon_sensors_temp_default_levels = (35, 40)

def inventory_poseidon_sensors_temp(info):
    inventory = []
    for sensor_name, sensor_value, sensor_type, sensor_unit in info:
        if sensor_type != "3":
            inventory.append( (sensor_name, "poseidon_sensors_temp_default_levels" ) )
    return inventory

def check_poseidon_sensors_temp(item, params, info):
    for sensor_name, sensor_value, sensor_type, sensor_unit in info:
        if sensor_name == item:
            sensor_value = saveint(sensor_value) / 10

            return check_temperature(int(sensor_value), params)

    return (3, "Sensor not found in SNMP data")

check_info["poseidon_sensors.temp"] = {
    "check_function"        : check_poseidon_sensors_temp,
    "inventory_function"    : inventory_poseidon_sensors_temp,
    "service_description"   : "Temperature %s",
    "group"                 : "hw_temperature",
    "has_perfdata"          : True,
    "snmp_info"             : poseidon_sensors_info,
    "snmp_scan_function"    : poseidon_sensors_scan,
    "includes"              : [ "temperature.include" ],
}

#
# HUMIDITY
#

poseidon_sensors_humidity_default_levels = (10, 20, 40, 50)

def inventory_poseidon_sensors_humidity(info):
    inventory = []
    for sensor_name, sensor_value, sensor_type, sensor_unit in info:
        if sensor_type == "3":
            inventory.append( (sensor_name, "poseidon_sensors_humidity_default_levels" ) )
    return inventory

def check_poseidon_sensors_humidity(item, params, info):
    for sensor_name, sensor_value, sensor_type, sensor_unit in info:
        if sensor_name == item:
            sensor_value = saveint(sensor_value) / 10
            critlow, warnlow, warnhigh, crithigh = params
            infotext = "%s %s  (warn/crit below %.1f/%.1f or above %.1f/%.1f %%)" % \
                            ( sensor_value, sensor_unit, warnlow, critlow, warnhigh, crithigh)
            perfdata = [ ( "humidity", sensor_value, critlow, warnlow, warnhigh, crithigh ) ]
            if sensor_value <= critlow or sensor_value >= crithigh:
                return (2, infotext, perfdata )
            elif sensor_value <= warnlow or sensor_value >= warnhigh:
                return (1, infotext, perfdata )
            else:
                return (0, infotext, perfdata )

    return (3, "Sensor not found in SNMP data")

check_info["poseidon_sensors.humidity"] = {
    "check_function"        : check_poseidon_sensors_humidity,
    "inventory_function"    : inventory_poseidon_sensors_humidity,
    "service_description"   : "Humidity %s",
    "group"                 : "humidity",
    "has_perfdata"          : True,
    "snmp_info"             : poseidon_sensors_info,
    "snmp_scan_function"    : poseidon_sensors_scan,
}
